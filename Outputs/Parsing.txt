code: Epsilon   --> Line Number (1) 
datatype: TYPE_INT( )
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_SUBTRACT( ) Arithmetic( ) lineNumber(1)
Arithmetic: BRACKET_OPEN Arithmetic( ) BRACKET_CLOSE lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_MULTIPLY( ) Arithmetic( )lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(1)
exp: CONST( ) datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT( ) VALUE_INT( ) lineNumber(1) 
line: exp( )
code: code line --> Line Number (1) 
Boolexp:VALUE_BOOL( )lineNumber(2)
line: exp( )
code: code line --> Line Number (2) 
exp: TYPE_CHAR( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT( ) VALUE_CHAR( ) lineNumber(3)
line: exp( )
code: code line --> Line Number (3) 
datatype: TYPE_FLOAT( )
Arithmetic: VALUE_FLOAT( ) lineNumber(5)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(5)
line: exp( )
code: code line --> Line Number (5) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(6)
line: exp( )
code: code line --> Line Number (6) 
Arithmetic: IDENTIFIER( ) lineNumber(7)
Condition: Arithmetic lineNumber(7)
Arithmetic: VALUE_INT( ) lineNumber(7)
Condition: Arithmetic lineNumber(7)
Condition: Condition( ) L( ) Condition( ) lineNumber(7)
Arithmetic: IDENTIFIER( ) lineNumber(7)
Arithmetic: VALUE_INT( ) lineNumber(7)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(7)
datatype: TYPE_INT( )
Arithmetic: VALUE_INT( ) lineNumber(8)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(8)
statment: exp( ) lineNumber(8)
statments: statment( ) lineNumber(8)
Arithmetic: IDENTIFIER( ) lineNumber(9)
Arithmetic: VALUE_INT( ) lineNumber(9)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(9)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(9)
statment: exp( ) lineNumber(9)
statments: statments( ) statment( )lineNumber(9)
Forloop: FOR( ) BRACKET_OPEN IDENTIFIER( ) OPERATOR_ASSIGNMENT VALUE_INT( ) SEMICOLON condition( ) SEMICOLON IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) BRACKET_CLOSE newscope_open statments( ) newscope_close lineNumber(10)
exp: Forloop( ) lineNumber(10)
line: exp( )
code: code line --> Line Number (10) 
Arithmetic: IDENTIFIER( ) lineNumber(12)
Condition: Arithmetic lineNumber(12)
Arithmetic: VALUE_INT( ) lineNumber(12)
Condition: Arithmetic lineNumber(12)
Condition: Condition( ) L( ) Condition( ) lineNumber(12)
code: code line --> Line Number (14) 
Arithmetic: IDENTIFIER( ) lineNumber(19)
Condition: Arithmetic lineNumber(19)
Arithmetic: VALUE_INT( ) lineNumber(19)
Condition: Arithmetic lineNumber(19)
Condition: Condition( ) L( ) Condition( ) lineNumber(19)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(21)
statment: exp( ) lineNumber(21)
statments: statment( ) lineNumber(21)
Arithmetic: VALUE_INT( ) lineNumber(22)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(22)
statment: exp( ) lineNumber(22)
statments: statments( ) statment( )lineNumber(22)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(26)
statment: exp( ) lineNumber(26)
statments: statment( ) lineNumber(26)
Arithmetic: VALUE_INT( ) lineNumber(27)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(27)
statment: exp( ) lineNumber(27)
statments: statments( ) statment( )lineNumber(27)
ifstatment: IF ( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close ELSE( ) newscope_open statment( ) newscope_close lineNumber(28)
exp: ifstatment( )lineNumber(28)
line: exp( )
code: code line --> Line Number (28) 
Arithmetic: IDENTIFIER( ) lineNumber(30)
Condition: Arithmetic lineNumber(30)
Arithmetic: VALUE_INT( ) lineNumber(31)
Condition: Arithmetic lineNumber(31)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(32)
statment: exp( ) lineNumber(32)
statments: statment( ) lineNumber(32)
Arithmetic: VALUE_INT( ) lineNumber(33)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(33)
statment: exp( ) lineNumber(33)
statments: statments( ) statment( )lineNumber(33)
break: BREAK( ) SEMICOLON( ) lineNumber(34)
case: CASE( ) Condition( ) COLON statments( ) break( ) lineNumber(34)
switchstmt: case( ) lineNumber(34)
datatype: TYPE_FLOAT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(36)
statment: exp( ) lineNumber(36)
statments: statment( ) lineNumber(36)
Arithmetic: VALUE_FLOAT( ) lineNumber(37)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(37)
statment: exp( ) lineNumber(37)
statments: statments( ) statment( )lineNumber(37)
break: BREAK( ) SEMICOLON( ) lineNumber(38)
default: DEFAULT( ) COLON statments( ) break( ) lineNumber(38)
case: default( ) lineNumber(38)
switchstmt: switchstmt( ) case( ) lineNumber(38)
switchcase: SWITCH( ) Condition( ) newscope_open switchstmt( ) newscope_close lineNumber(39)
exp: switchcase( ) lineNumber(39)
line: exp( )
code: code line --> Line Number (39) 
Arithmetic: IDENTIFIER( ) lineNumber(42)
Condition: Arithmetic lineNumber(42)
Arithmetic: VALUE_INT( ) lineNumber(42)
Condition: Arithmetic lineNumber(42)
Condition: Condition( ) EQ( ) Condition( )lineNumber(42)
Boolexp:VALUE_BOOL( )lineNumber(43)
Condition: Boolexp lineNumber(43)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(44)
statment: exp( ) lineNumber(44)
statments: statment( ) lineNumber(44)
ifstatment: IF( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close lineNumber(46) 
exp: ifstatment( )lineNumber(46)
statment: exp( ) lineNumber(46)
statments: statment( ) lineNumber(46)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(48)
statment: exp( ) lineNumber(48)
statments: statment( ) lineNumber(48)
ifstatment: IF ( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close ELSE( ) newscope_open statment( ) newscope_close lineNumber(49)
exp: ifstatment( )lineNumber(49)
line: exp( )
code: code line --> Line Number (49) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(52)
line: exp( )
code: code line --> Line Number (52) 
datatype: TYPE_INT( )
Arithmetic: IDENTIFIER( ) lineNumber(53)
Arithmetic: VALUE_INT( ) lineNumber(53)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(53)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(53)
line: exp( )
code: code line --> Line Number (53) 
code: code line --> Line Number (54) 
code: code line --> Line Number (56) 
code: code line --> Line Number (57) 
code: code line --> Line Number (58) 
code: code line --> Line Number (59) 
code: code line --> Line Number (60) 
code: code line --> Line Number (64) 
code: code line --> Line Number (65) 
datatype: TYPE_INT( )
