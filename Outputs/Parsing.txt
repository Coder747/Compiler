code: Epsilon   --> Line Number (1) 
datatype: TYPE_INT( )
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_SUBTRACT( ) Arithmetic( ) lineNumber(1)
Arithmetic: BRACKET_OPEN Arithmetic( ) BRACKET_CLOSE lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_MULTIPLY( ) Arithmetic( )lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(1)
Arithmetic: VALUE_INT( ) lineNumber(1)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(1)
exp: CONST( ) datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT( ) VALUE_INT( ) lineNumber(1) 
line: exp( )
code: code line --> Line Number (1) 
Boolexp:VALUE_BOOL( )lineNumber(2)
exp : datatype( ) TYPE_BOOL( ) OPERATOR_ASSIGNMENT VALUE_BOOL( ) lineNumber(2)
line: exp( )
code: code line --> Line Number (2) 
exp: TYPE_CHAR( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT( ) VALUE_CHAR( ) lineNumber(3)
line: exp( )
code: code line --> Line Number (3) 
datatype: TYPE_FLOAT( )
Arithmetic: VALUE_FLOAT( ) lineNumber(5)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(5)
line: exp( )
code: code line --> Line Number (5) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(6)
line: exp( )
code: code line --> Line Number (6) 
Arithmetic: IDENTIFIER( ) lineNumber(7)
Condition: Arithmetic lineNumber(7)
Arithmetic: VALUE_INT( ) lineNumber(7)
Condition: Arithmetic lineNumber(7)
Condition: Condition( ) L( ) Condition( ) lineNumber(7)
Arithmetic: IDENTIFIER( ) lineNumber(7)
Arithmetic: VALUE_INT( ) lineNumber(7)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(7)
datatype: TYPE_INT( )
Arithmetic: VALUE_INT( ) lineNumber(8)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(8)
statment: exp( ) lineNumber(8)
statments: statment( ) lineNumber(8)
Arithmetic: IDENTIFIER( ) lineNumber(9)
Arithmetic: VALUE_INT( ) lineNumber(9)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(9)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(9)
statment: exp( ) lineNumber(9)
statments: statments( ) statment( )lineNumber(9)
Forloop: FOR( ) BRACKET_OPEN IDENTIFIER( ) OPERATOR_ASSIGNMENT VALUE_INT( ) SEMICOLON condition( ) SEMICOLON IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) BRACKET_CLOSE newscope_open statments( ) newscope_close lineNumber(10)
exp: Forloop( ) lineNumber(10)
line: exp( )
code: code line --> Line Number (10) 
Arithmetic: IDENTIFIER( ) lineNumber(13)
Condition: Arithmetic lineNumber(13)
Arithmetic: VALUE_INT( ) lineNumber(13)
Condition: Arithmetic lineNumber(13)
Condition: Condition( ) L( ) Condition( ) lineNumber(13)
datatype: TYPE_INT( )
Arithmetic: VALUE_INT( ) lineNumber(14)
exp : datatype( ) IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(14)
statment: exp( ) lineNumber(14)
statments: statment( ) lineNumber(14)
Whileloop: WHILE( ) Condition( ) newscope_open statments( ) newscope_close lineNumber(16)
exp: Whileloop( )lineNumber(16)
line: exp( )
code: code line --> Line Number (16) 
Arithmetic: IDENTIFIER( ) lineNumber(20)
Condition: Arithmetic lineNumber(20)
Arithmetic: VALUE_INT( ) lineNumber(20)
Condition: Arithmetic lineNumber(20)
Condition: Condition( ) L( ) Condition( ) lineNumber(20)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(22)
statment: exp( ) lineNumber(22)
statments: statment( ) lineNumber(22)
Arithmetic: VALUE_INT( ) lineNumber(23)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(23)
statment: exp( ) lineNumber(23)
statments: statments( ) statment( )lineNumber(23)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(27)
statment: exp( ) lineNumber(27)
statments: statment( ) lineNumber(27)
Arithmetic: VALUE_INT( ) lineNumber(28)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(28)
statment: exp( ) lineNumber(28)
statments: statments( ) statment( )lineNumber(28)
ifstatment: IF ( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close ELSE( ) newscope_open statment( ) newscope_close lineNumber(29)
exp: ifstatment( )lineNumber(29)
line: exp( )
code: code line --> Line Number (29) 
Arithmetic: IDENTIFIER( ) lineNumber(31)
Condition: Arithmetic lineNumber(31)
Arithmetic: VALUE_INT( ) lineNumber(32)
Condition: Arithmetic lineNumber(32)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(33)
statment: exp( ) lineNumber(33)
statments: statment( ) lineNumber(33)
Arithmetic: VALUE_INT( ) lineNumber(34)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(34)
statment: exp( ) lineNumber(34)
statments: statments( ) statment( )lineNumber(34)
break: BREAK( ) SEMICOLON( ) lineNumber(35)
case: CASE( ) Condition( ) COLON statments( ) break( ) lineNumber(35)
switchstmt: case( ) lineNumber(35)
datatype: TYPE_FLOAT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(37)
statment: exp( ) lineNumber(37)
statments: statment( ) lineNumber(37)
Arithmetic: VALUE_FLOAT( ) lineNumber(38)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(38)
statment: exp( ) lineNumber(38)
statments: statments( ) statment( )lineNumber(38)
break: BREAK( ) SEMICOLON( ) lineNumber(39)
default: DEFAULT( ) COLON statments( ) break( ) lineNumber(39)
case: default( ) lineNumber(39)
switchstmt: switchstmt( ) case( ) lineNumber(39)
switchcase: SWITCH( ) Condition( ) newscope_open switchstmt( ) newscope_close lineNumber(40)
exp: switchcase( ) lineNumber(40)
line: exp( )
code: code line --> Line Number (40) 
Arithmetic: IDENTIFIER( ) lineNumber(43)
Condition: Arithmetic lineNumber(43)
Arithmetic: VALUE_INT( ) lineNumber(43)
Condition: Arithmetic lineNumber(43)
Condition: Condition( ) EQ( ) Condition( )lineNumber(43)
Boolexp:VALUE_BOOL( )lineNumber(44)
Condition: Boolexp lineNumber(44)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(45)
statment: exp( ) lineNumber(45)
statments: statment( ) lineNumber(45)
ifstatment: IF( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close lineNumber(47) 
exp: ifstatment( )lineNumber(47)
statment: exp( ) lineNumber(47)
statments: statment( ) lineNumber(47)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(49)
statment: exp( ) lineNumber(49)
statments: statment( ) lineNumber(49)
ifstatment: IF ( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close ELSE( ) newscope_open statment( ) newscope_close lineNumber(50)
exp: ifstatment( )lineNumber(50)
line: exp( )
code: code line --> Line Number (50) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(52)
line: exp( )
code: code line --> Line Number (52) 
Arithmetic: IDENTIFIER( ) lineNumber(53)
Condition: Arithmetic lineNumber(53)
Arithmetic: VALUE_INT( ) lineNumber(53)
Condition: Arithmetic lineNumber(53)
Condition: Condition( ) EQ( ) Condition( )lineNumber(53)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(54)
statment: exp( ) lineNumber(54)
statments: statment( ) lineNumber(54)
ifstatment: IF( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close lineNumber(56) 
exp: ifstatment( )lineNumber(56)
line: exp( )
code: code line --> Line Number (56) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(56)
line: exp( )
code: code line --> Line Number (56) 
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(58)
line: exp( )
code: code line --> Line Number (58) 
Arithmetic: IDENTIFIER( ) lineNumber(59)
Condition: Arithmetic lineNumber(59)
Arithmetic: VALUE_INT( ) lineNumber(59)
Condition: Arithmetic lineNumber(59)
Condition: Condition( ) L( ) Condition( ) lineNumber(59)
Arithmetic: IDENTIFIER( ) lineNumber(59)
Arithmetic: VALUE_INT( ) lineNumber(59)
Arithmetic: Arithmetic( ) OPERATOR_PLUS( ) Arithmetic( )lineNumber(59)
exp : datatype( ) TYPE_BOOL( ) lineNumber(60)
statment: exp( ) lineNumber(60)
statments: statment( ) lineNumber(60)
Arithmetic: VALUE_INT( ) lineNumber(61)
exp : IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) lineNumber(61)
statment: exp( ) lineNumber(61)
statments: statments( ) statment( )lineNumber(61)
Arithmetic: IDENTIFIER( ) lineNumber(62)
Condition: Arithmetic lineNumber(62)
Arithmetic: VALUE_INT( ) lineNumber(63)
Condition: Arithmetic lineNumber(63)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(64)
statment: exp( ) lineNumber(64)
statments: statment( ) lineNumber(64)
break: BREAK( ) SEMICOLON( ) lineNumber(65)
case: CASE( ) Condition( ) COLON statments( ) break( ) lineNumber(65)
switchstmt: case( ) lineNumber(65)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(67)
statment: exp( ) lineNumber(67)
statments: statment( ) lineNumber(67)
break: BREAK( ) SEMICOLON( ) lineNumber(68)
default: DEFAULT( ) COLON statments( ) break( ) lineNumber(68)
case: default( ) lineNumber(68)
switchstmt: switchstmt( ) case( ) lineNumber(68)
switchcase: SWITCH( ) Condition( ) newscope_open switchstmt( ) newscope_close lineNumber(69)
exp: switchcase( ) lineNumber(69)
statment: exp( ) lineNumber(69)
statments: statments( ) statment( )lineNumber(69)
Arithmetic: IDENTIFIER( ) lineNumber(70)
Condition: Arithmetic lineNumber(70)
Arithmetic: VALUE_INT( ) lineNumber(70)
Condition: Arithmetic lineNumber(70)
Condition: Condition( ) L( ) Condition( ) lineNumber(70)
datatype: TYPE_FLOAT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(71)
statment: exp( ) lineNumber(71)
statments: statment( ) lineNumber(71)
Arithmetic: IDENTIFIER( ) lineNumber(72)
Condition: Arithmetic lineNumber(72)
Arithmetic: VALUE_INT( ) lineNumber(72)
Condition: Arithmetic lineNumber(72)
Condition: Condition( ) EQ( ) Condition( )lineNumber(72)
datatype: TYPE_INT( )
exp: datatype( ) IDENTIFIER( ) lineNumber(73)
statment: exp( ) lineNumber(73)
statments: statment( ) lineNumber(73)
ifstatment: IF( ) BRACKET_OPEN Condition( ) BRACKET_CLOSE newscope_open statment( ) newscope_close lineNumber(75) 
exp: ifstatment( )lineNumber(75)
statment: exp( ) lineNumber(75)
statments: statments( ) statment( )lineNumber(75)
Whileloop: WHILE( ) Condition( ) newscope_open statments( ) newscope_close lineNumber(75)
exp: Whileloop( )lineNumber(75)
statment: exp( ) lineNumber(75)
statments: statments( ) statment( )lineNumber(75)
Forloop: FOR( ) BRACKET_OPEN IDENTIFIER( ) OPERATOR_ASSIGNMENT VALUE_INT( ) SEMICOLON condition( ) SEMICOLON IDENTIFIER( ) OPERATOR_ASSIGNMENT Arithmetic( ) BRACKET_CLOSE newscope_open statments( ) newscope_close lineNumber(76)
exp: Forloop( ) lineNumber(76)
line: exp( )
code: code line --> Line Number (76) 
